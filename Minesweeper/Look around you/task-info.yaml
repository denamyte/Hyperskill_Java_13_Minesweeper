type: edu
custom_name: stage3
files:
- name: src/minesweeper/Main.java
  visible: true
  text: |
    package minesweeper;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends StageTest<Integer> {
        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                int mines = i;
                TestCase<Integer> test = new TestCase<Integer>()
                    .setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        String output = main.execute("" + mines);
                        return test(output, mines);
                    });
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        public CheckResult test(String reply, Integer attach) {
            List<String> lines =
                Arrays.stream(reply.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.wrong(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.wrong(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.wrong(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.' && !(c >= '0' && c <= '9')) {
                        return CheckResult.wrong(
                            "One of the characters is not equal to 'X' or '.' or to a number.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.wrong(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            int[] around = new int[] {-1, 0, 1};

            for (int y = 0; y < lines.size(); y++) {
                String line = lines.get(y);
                for (int x = 0; x < line.length(); x++) {
                    char c = line.charAt(x);

                    if (c == 'X') {
                        continue;
                    }

                    int minesAround = 0;

                    for (int dx : around) {
                        for (int dy : around) {

                            int newX = x + dx;
                            int newY = y + dy;

                            if (0 <= newX && newX < 9 &&
                                0 <= newY && newY < 9) {

                                char newC = lines.get(newY).charAt(newX);

                                if (newC == 'X') {
                                    minesAround++;
                                }
                            }
                        }
                    }

                    if (minesAround == 0 && c != '.') {
                        return CheckResult.wrong(
                            "There are no mines around, but found number " + c + ".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                    if (minesAround != 0 && c != '0' + minesAround) {
                        return CheckResult.wrong(
                            "In this cell should be number " + minesAround + ", " +
                                "but found symbol \"" + c + "\".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/minesweeper/Minesweeper.java
  visible: true
  text: |
    package minesweeper;

    import java.util.*;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;

    public class Minesweeper {

        private static final String SAFE_CELL = ".";
        private static final String MINE = "X";
        private static final List<int[]> ADJACENT_SHIFTS = List.of(
                ar2(-1, -1), ar2(-1,0), ar2(-1, 1),
                ar2( 0, -1), /*      */ ar2( 0, 1),
                ar2( 1, -1), ar2(1, 0), ar2( 1, 1)
        );

        private final Random RANDOM;
        private final String[][] field;
        private final int rows;
        private final int cols;

        public Minesweeper(int rows, int cols) {
            RANDOM = new Random(System.currentTimeMillis());
            field = prepareField(rows, cols);
            this.rows = rows;
            this.cols = cols;
        }

        private static int[] ar2(int row, int col) {
            return new int[]{row, col};
        }

        private static String[][] prepareField(int rows, int cols) {
            String[][] field = new String[rows][cols];
            for (String[] row : field) {
                Arrays.fill(row, SAFE_CELL);
            }
            return field;
        }

        public void mine(int mineCount) {
            generateMines(mineCount).forEach(this::placeMine);
        }

        private Set<Integer> generateMines(int mineCount) {
            final List<Integer> crdList = IntStream.range(0, rows * cols).boxed().collect(Collectors.toList());

            Set<Integer> mines = new HashSet<>();
            int count = Math.min(mineCount, rows * cols);
            while (count-- > 0) {
                mines.add(crdList.remove(RANDOM.nextInt(crdList.size())));
            }
            return mines;
        }

        private void placeMine(int flatCrd) {
            int row = flatCrd / rows;
            int col = flatCrd % rows;
            field[row][col] = MINE;

            ADJACENT_SHIFTS.forEach(shift -> incMineCountAtCell(row + shift[0], col + shift[1]));
        }

        private void incMineCountAtCell(int row, int col) {
            if (row >= 0 && row < rows && col >= 0 && col < cols
                    && !field[row][col].equals(MINE)) {
                String content = field[row][col];
                int count = content.equals(SAFE_CELL) ? 1 : Integer.parseInt(content) + 1;
                field[row][col] = String.valueOf(count);
            }
        }

        public String render() {
            StringBuilder sb = new StringBuilder();
            for (String[] row : field) {
                sb.append(String.join("", row));
                sb.append('\n');
            }
            sb.setLength(sb.length() - 1);

            return sb.toString();
        }
    }
  learner_created: true
- name: src/minesweeper/MinesweeperGameplayFacade.java
  visible: true
  text: |
    package minesweeper;

    import java.util.Scanner;

    public class MinesweeperGameplayFacade {

        public static void stage3() {
            try (Scanner scanner = new Scanner(System.in)) {
                Minesweeper minesweeper = new Minesweeper(9, 9);

                System.out.print("How many mines do you want on the field? ");
                minesweeper.mine(scanner.nextInt());
                System.out.println(minesweeper.render());
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/77/stages/428/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 20 May 2021 00:13:22 UTC
record: -1
